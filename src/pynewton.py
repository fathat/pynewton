# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pynewton', [dirname(__file__)])
        except ImportError:
            import _pynewton
            return _pynewton
        if fp is not None:
            try:
                _mod = imp.load_module('_pynewton', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pynewton = swig_import_helper()
    del swig_import_helper
else:
    import _pynewton
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



def new_CDoubleArray(*args):
  return _pynewton.new_CDoubleArray(*args)
new_CDoubleArray = _pynewton.new_CDoubleArray

def delete_CDoubleArray(*args):
  return _pynewton.delete_CDoubleArray(*args)
delete_CDoubleArray = _pynewton.delete_CDoubleArray

def CDoubleArray_getitem(*args):
  return _pynewton.CDoubleArray_getitem(*args)
CDoubleArray_getitem = _pynewton.CDoubleArray_getitem

def CDoubleArray_setitem(*args):
  return _pynewton.CDoubleArray_setitem(*args)
CDoubleArray_setitem = _pynewton.CDoubleArray_setitem
class World(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, NewtonWorld world) -> World
        __init__(self) -> World

        1
        """
        if self.__class__ == World:
            _self = None
        else:
            _self = self
        this = _pynewton.new_World(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_World
    __del__ = lambda self : None;
    def RegisterBody(self, *args):
        """
        RegisterBody(self, Body body)

        1
        """
        return _pynewton.World_RegisterBody(self, *args)

    def UnregisterBody(self, *args):
        """
        UnregisterBody(self, Body body)

        1
        """
        return _pynewton.World_UnregisterBody(self, *args)

    def GetNewtonWorld(self):
        """
        GetNewtonWorld(self) -> NewtonWorld

        1
        """
        return _pynewton.World_GetNewtonWorld(self)

    def Update(self, *args):
        """
        Update(self, dFloat timeStep)

        1
        """
        return _pynewton.World_Update(self, *args)

    def SetPlatformArchitecture(self, *args):
        """
        SetPlatformArchitecture(self, int mode)

        1
        """
        return _pynewton.World_SetPlatformArchitecture(self, *args)

    def SetSolverModel(self, *args):
        """
        SetSolverModel(self, int model)

        1
        """
        return _pynewton.World_SetSolverModel(self, *args)

    def SetFrictionModel(self, *args):
        """
        SetFrictionModel(self, int model)

        1
        """
        return _pynewton.World_SetFrictionModel(self, *args)

    def GetTimeStep(self):
        """
        GetTimeStep(self) -> dFloat

        1
        """
        return _pynewton.World_GetTimeStep(self)

    def SetMinimumFrameRate(self, *args):
        """
        SetMinimumFrameRate(self, dFloat frameRate)

        1
        """
        return _pynewton.World_SetMinimumFrameRate(self, *args)

    def SetWorldSize(self, *args):
        """
        SetWorldSize(self, dFloat minPoint, dFloat maxPoint)

        1
        """
        return _pynewton.World_SetWorldSize(self, *args)

    def GetVersion(self):
        """
        GetVersion(self) -> int

        1
        """
        return _pynewton.World_GetVersion(self)

    def RemoveBody(self, *args):
        """
        RemoveBody(self, Body body)

        1
        """
        return _pynewton.World_RemoveBody(self, *args)

    def SetUserData(self, *args):
        """
        SetUserData(self, PyObject data)

        1
        """
        return _pynewton.World_SetUserData(self, *args)

    def GetUserData(self):
        """
        GetUserData(self) -> PyObject

        1
        """
        return _pynewton.World_GetUserData(self)

    def RayCastCallback(self, *args):
        """
        RayCastCallback(self, NewtonBody body, dFloat nx, dFloat ny, dFloat nz, int collisionID, 
            dFloat intersectParam) -> dFloat

        1
        """
        return _pynewton.World_RayCastCallback(self, *args)

    def CppRayCast(self, *args):
        """
        CppRayCast(self, float ax, float ay, float az, float bx, float by, float bz)

        1
        """
        return _pynewton.World_CppRayCast(self, *args)

    def MaterialGetDefaultGroupID(self):
        """
        MaterialGetDefaultGroupID(self) -> int

        1
        """
        return _pynewton.World_MaterialGetDefaultGroupID(self)

    def MaterialCreateGroupID(self):
        """
        MaterialCreateGroupID(self) -> int

        1
        """
        return _pynewton.World_MaterialCreateGroupID(self)

    def MaterialDestroyAllGroupID(self):
        """
        MaterialDestroyAllGroupID(self)

        1
        """
        return _pynewton.World_MaterialDestroyAllGroupID(self)

    def MaterialSetDefaultSoftness(self, *args):
        """
        MaterialSetDefaultSoftness(self, int id0, int id1, dFloat value)

        1
        """
        return _pynewton.World_MaterialSetDefaultSoftness(self, *args)

    def MaterialSetDefaultElasticity(self, *args):
        """
        MaterialSetDefaultElasticity(self, int id0, int id1, dFloat elasticCoef)

        1
        """
        return _pynewton.World_MaterialSetDefaultElasticity(self, *args)

    def MaterialSetDefaultCollidable(self, *args):
        """
        MaterialSetDefaultCollidable(self, int id0, int id1, int state)

        1
        """
        return _pynewton.World_MaterialSetDefaultCollidable(self, *args)

    def MaterialSetContinuousCollisionMode(self, *args):
        """
        MaterialSetContinuousCollisionMode(self, int id0, int id1, int state)

        1
        """
        return _pynewton.World_MaterialSetContinuousCollisionMode(self, *args)

    def MaterialSetDefaultFriction(self, *args):
        """
        MaterialSetDefaultFriction(self, int id0, int id1, dFloat staticFriction, dFloat kineticFriction)

        1
        """
        return _pynewton.World_MaterialSetDefaultFriction(self, *args)

    def MaterialBeginCollision(self, *args):
        """
        MaterialBeginCollision(self, Material mat, NewtonBody b1, NewtonBody b2)

        1
        """
        return _pynewton.World_MaterialBeginCollision(self, *args)

    def MaterialProcessCollision(self, *args):
        """
        MaterialProcessCollision(self, Material mat, NewtonContact contactHandle)

        1
        """
        return _pynewton.World_MaterialProcessCollision(self, *args)

    def MaterialEndCollision(self, *args):
        """
        MaterialEndCollision(self, Material mat)

        1
        """
        return _pynewton.World_MaterialEndCollision(self, *args)

    def RegisterMaterialCallbackBetween(self, *args):
        """
        RegisterMaterialCallbackBetween(self, int id0, int id1)

        1
        """
        return _pynewton.World_RegisterMaterialCallbackBetween(self, *args)

    def __disown__(self):
        self.this.disown()
        _pynewton.disown_World(self)
        return weakref_proxy(self)
World_swigregister = _pynewton.World_swigregister
World_swigregister(World)

class Material(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_material"] = _pynewton.Material_m_material_set
    __swig_getmethods__["m_material"] = _pynewton.Material_m_material_get
    if _newclass:m_material = _swig_property(_pynewton.Material_m_material_get, _pynewton.Material_m_material_set)
    def __init__(self, *args): 
        """
        __init__(self, NewtonMaterial m) -> Material

        1
        """
        this = _pynewton.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Material
    __del__ = lambda self : None;
    def DisableContact(self):
        """
        DisableContact(self)

        1
        """
        return _pynewton.Material_DisableContact(self)

    def GetCurrentTimestep(self):
        """
        GetCurrentTimestep(self) -> dFloat

        1
        """
        return _pynewton.Material_GetCurrentTimestep(self)

    def GetContactFaceAttribute(self):
        """
        GetContactFaceAttribute(self) -> unsigned int

        1
        """
        return _pynewton.Material_GetContactFaceAttribute(self)

    def GetBodyCollisionID(self, *args):
        """
        GetBodyCollisionID(self, Body body) -> unsigned int

        1
        """
        return _pynewton.Material_GetBodyCollisionID(self, *args)

    def GetContactNormalSpeed(self, *args):
        """
        GetContactNormalSpeed(self, NewtonContact contactlHandle) -> dFloat

        1
        """
        return _pynewton.Material_GetContactNormalSpeed(self, *args)

    def GetContactForce(self):
        """
        GetContactForce(self) -> PyObject

        1
        """
        return _pynewton.Material_GetContactForce(self)

    def GetContactPosition(self):
        """
        GetContactPosition(self) -> PyObject

        1
        """
        return _pynewton.Material_GetContactPosition(self)

    def GetContactNormal(self):
        """
        GetContactNormal(self) -> PyObject

        1
        """
        return _pynewton.Material_GetContactNormal(self)

    def GetContactTangentDirections(self):
        """
        GetContactTangentDirections(self) -> PyObject

        1
        """
        return _pynewton.Material_GetContactTangentDirections(self)

    def GetContactTangentSpeed(self, *args):
        """
        GetContactTangentSpeed(self, NewtonContact contactlHandle, int index) -> dFloat

        1
        """
        return _pynewton.Material_GetContactTangentSpeed(self, *args)

    def SetContactSoftness(self, *args):
        """
        SetContactSoftness(self, dFloat softness)

        1
        """
        return _pynewton.Material_SetContactSoftness(self, *args)

    def SetContactElasticity(self, *args):
        """
        SetContactElasticity(self, dFloat restitution)

        1
        """
        return _pynewton.Material_SetContactElasticity(self, *args)

    def SetContactFrictionState(self, *args):
        """
        SetContactFrictionState(self, int state, int index)

        1
        """
        return _pynewton.Material_SetContactFrictionState(self, *args)

    def SetContactStaticFrictionCoef(self, *args):
        """
        SetContactStaticFrictionCoef(self, dFloat coef, int index)

        1
        """
        return _pynewton.Material_SetContactStaticFrictionCoef(self, *args)

    def SetContactKineticFrictionCoef(self, *args):
        """
        SetContactKineticFrictionCoef(self, dFloat coef, int index)

        1
        """
        return _pynewton.Material_SetContactKineticFrictionCoef(self, *args)

    def SetContactNormalAcceleration(self, *args):
        """
        SetContactNormalAcceleration(self, dFloat accel)

        1
        """
        return _pynewton.Material_SetContactNormalAcceleration(self, *args)

    def SetContactNormalDirection(self, *args):
        """
        SetContactNormalDirection(self, dFloat directionVector)

        1
        """
        return _pynewton.Material_SetContactNormalDirection(self, *args)

    def SetContactTangentAcceleration(self, *args):
        """
        SetContactTangentAcceleration(self, dFloat accel, int index)

        1
        """
        return _pynewton.Material_SetContactTangentAcceleration(self, *args)

    def ContactRotateTangentDirections(self, *args):
        """
        ContactRotateTangentDirections(self, dFloat directionVector)

        1
        """
        return _pynewton.Material_ContactRotateTangentDirections(self, *args)

Material_swigregister = _pynewton.Material_swigregister
Material_swigregister(Material)

class RayCollision(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayCollision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayCollision, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _pynewton.RayCollision_distance_set
    __swig_getmethods__["distance"] = _pynewton.RayCollision_distance_get
    if _newclass:distance = _swig_property(_pynewton.RayCollision_distance_get, _pynewton.RayCollision_distance_set)
    __swig_setmethods__["normalX"] = _pynewton.RayCollision_normalX_set
    __swig_getmethods__["normalX"] = _pynewton.RayCollision_normalX_get
    if _newclass:normalX = _swig_property(_pynewton.RayCollision_normalX_get, _pynewton.RayCollision_normalX_set)
    __swig_setmethods__["normalY"] = _pynewton.RayCollision_normalY_set
    __swig_getmethods__["normalY"] = _pynewton.RayCollision_normalY_get
    if _newclass:normalY = _swig_property(_pynewton.RayCollision_normalY_get, _pynewton.RayCollision_normalY_set)
    __swig_setmethods__["normalZ"] = _pynewton.RayCollision_normalZ_set
    __swig_getmethods__["normalZ"] = _pynewton.RayCollision_normalZ_get
    if _newclass:normalZ = _swig_property(_pynewton.RayCollision_normalZ_get, _pynewton.RayCollision_normalZ_set)
    __swig_setmethods__["attributeID"] = _pynewton.RayCollision_attributeID_set
    __swig_getmethods__["attributeID"] = _pynewton.RayCollision_attributeID_get
    if _newclass:attributeID = _swig_property(_pynewton.RayCollision_attributeID_get, _pynewton.RayCollision_attributeID_set)
    def __init__(self): 
        """
        __init__(self) -> RayCollision

        1
        """
        this = _pynewton.new_RayCollision()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_RayCollision
    __del__ = lambda self : None;
RayCollision_swigregister = _pynewton.RayCollision_swigregister
RayCollision_swigregister(RayCollision)

class CollisionGeometry(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollisionGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollisionGeometry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> CollisionGeometry

        1
        """
        this = _pynewton.new_CollisionGeometry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_CollisionGeometry
    __del__ = lambda self : None;
    def GetNewtonCollision(self):
        """
        GetNewtonCollision(self) -> NewtonCollision

        1
        """
        return _pynewton.CollisionGeometry_GetNewtonCollision(self)

    def GetNewtonWorld(self):
        """
        GetNewtonWorld(self) -> NewtonWorld

        1
        """
        return _pynewton.CollisionGeometry_GetNewtonWorld(self)

    def PointDistance(self, *args):
        """
        PointDistance(self, dFloat point, dFloat matrix) -> PyObject

        1
        """
        return _pynewton.CollisionGeometry_PointDistance(self, *args)

    def ClosestPoint(self, *args):
        """
        ClosestPoint(self, dFloat matrixA, CollisionGeometry collsionB, dFloat matrixB) -> PyObject

        1
        """
        return _pynewton.CollisionGeometry_ClosestPoint(self, *args)

    def CalculateAABB(self, *args):
        """
        CalculateAABB(self, dFloat matrix) -> PyObject

        1
        """
        return _pynewton.CollisionGeometry_CalculateAABB(self, *args)

    def RayCast(self, *args):
        """
        RayCast(self, dFloat vectorA, dFloat vectorB) -> RayCollision

        1
        """
        return _pynewton.CollisionGeometry_RayCast(self, *args)

CollisionGeometry_swigregister = _pynewton.CollisionGeometry_swigregister
CollisionGeometry_swigregister(CollisionGeometry)

class CompoundCollision(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundCollision, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundCollision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world) -> CompoundCollision

        1
        """
        this = _pynewton.new_CompoundCollision(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddCollision(self, *args):
        """
        AddCollision(self, CollisionGeometry c)

        1
        """
        return _pynewton.CompoundCollision_AddCollision(self, *args)

    def Finalize(self):
        """
        Finalize(self)

        1
        """
        return _pynewton.CompoundCollision_Finalize(self)

    __swig_destroy__ = _pynewton.delete_CompoundCollision
    __del__ = lambda self : None;
CompoundCollision_swigregister = _pynewton.CompoundCollision_swigregister
CompoundCollision_swigregister(CompoundCollision)

class Sphere(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat radiusX, dFloat radiusY, dFloat radiusZ, 
            dFloat offsetMatrix) -> Sphere

        1
        """
        this = _pynewton.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Sphere
    __del__ = lambda self : None;
Sphere_swigregister = _pynewton.Sphere_swigregister
Sphere_swigregister(Sphere)

class Box(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat x, dFloat y, dFloat z, dFloat offsetMatrix) -> Box

        1
        """
        this = _pynewton.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _pynewton.Box_swigregister
Box_swigregister(Box)

class Cone(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cone, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat radius, dFloat height, dFloat offsetMatrix) -> Cone

        1
        """
        this = _pynewton.new_Cone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Cone
    __del__ = lambda self : None;
Cone_swigregister = _pynewton.Cone_swigregister
Cone_swigregister(Cone)

class Capsule(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capsule, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capsule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat radius, dFloat height, dFloat offsetMatrix) -> Capsule

        1
        """
        this = _pynewton.new_Capsule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Capsule
    __del__ = lambda self : None;
Capsule_swigregister = _pynewton.Capsule_swigregister
Capsule_swigregister(Capsule)

class Cylinder(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat radius, dFloat height, dFloat offsetMatrix) -> Cylinder

        1
        """
        this = _pynewton.new_Cylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Cylinder
    __del__ = lambda self : None;
Cylinder_swigregister = _pynewton.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class ChamferCylinder(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChamferCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChamferCylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat radius, dFloat height, dFloat offsetMatrix) -> ChamferCylinder

        1
        """
        this = _pynewton.new_ChamferCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_ChamferCylinder
    __del__ = lambda self : None;
ChamferCylinder_swigregister = _pynewton.ChamferCylinder_swigregister
ChamferCylinder_swigregister(ChamferCylinder)

class ConvexHull(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHull, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHull, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, PyObject pylist, dFloat offsetMatrix) -> ConvexHull

        1
        """
        this = _pynewton.new_ConvexHull(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetUserID(self, *args):
        """
        SetUserID(self, unsigned int id)

        1
        """
        return _pynewton.ConvexHull_SetUserID(self, *args)

    def GetUserID(self):
        """
        GetUserID(self) -> unsigned int

        1
        """
        return _pynewton.ConvexHull_GetUserID(self)

    def CalculateVolume(self):
        """
        CalculateVolume(self) -> dFloat

        1
        """
        return _pynewton.ConvexHull_CalculateVolume(self)

    def CalculateInertiaMatrix(self):
        """
        CalculateInertiaMatrix(self) -> PyObject

        1
        """
        return _pynewton.ConvexHull_CalculateInertiaMatrix(self)

    __swig_destroy__ = _pynewton.delete_ConvexHull
    __del__ = lambda self : None;
ConvexHull_swigregister = _pynewton.ConvexHull_swigregister
ConvexHull_swigregister(ConvexHull)

class ConvexHullModifier(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHullModifier, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHullModifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, ConvexHull hull) -> ConvexHullModifier

        1
        """
        this = _pynewton.new_ConvexHullModifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetMatrix(self, *args):
        """
        SetMatrix(self, dFloat matrix)

        1
        """
        return _pynewton.ConvexHullModifier_SetMatrix(self, *args)

    def GetMatrix(self):
        """
        GetMatrix(self) -> PyObject

        1
        """
        return _pynewton.ConvexHullModifier_GetMatrix(self)

    __swig_destroy__ = _pynewton.delete_ConvexHullModifier
    __del__ = lambda self : None;
ConvexHullModifier_swigregister = _pynewton.ConvexHullModifier_swigregister
ConvexHullModifier_swigregister(ConvexHullModifier)

class NullCollider(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullCollider, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullCollider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world) -> NullCollider

        1
        """
        this = _pynewton.new_NullCollider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_NullCollider
    __del__ = lambda self : None;
NullCollider_swigregister = _pynewton.NullCollider_swigregister
NullCollider_swigregister(NullCollider)

class TreeCollisionUserCallback(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeCollisionUserCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeCollisionUserCallback, name)
    __repr__ = _swig_repr
    def OnCallback(self, *args):
        """
        OnCallback(self, Body bodyWithTreeCollision, Body body, dFloat vertex, 
            int vertexstrideInBytes, int indexCount, int indexArray)

        1
        """
        return _pynewton.TreeCollisionUserCallback_OnCallback(self, *args)

    def __init__(self): 
        """
        __init__(self) -> TreeCollisionUserCallback

        1
        """
        if self.__class__ == TreeCollisionUserCallback:
            _self = None
        else:
            _self = self
        this = _pynewton.new_TreeCollisionUserCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_TreeCollisionUserCallback
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_TreeCollisionUserCallback(self)
        return weakref_proxy(self)
TreeCollisionUserCallback_swigregister = _pynewton.TreeCollisionUserCallback_swigregister
TreeCollisionUserCallback_swigregister(TreeCollisionUserCallback)

class TreeCollision(CollisionGeometry):
    """1"""
    __swig_setmethods__ = {}
    for _s in [CollisionGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeCollision, name, value)
    __swig_getmethods__ = {}
    for _s in [CollisionGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeCollision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world) -> TreeCollision

        1
        """
        this = _pynewton.new_TreeCollision(*args)
        try: self.this.append(this)
        except: self.this = this
    def BeginBuild(self):
        """
        BeginBuild(self)

        1
        """
        return _pynewton.TreeCollision_BeginBuild(self)

    def AddFace(self, *args):
        """
        AddFace(self, PyObject vertexList, int faceAttribute)

        1
        """
        return _pynewton.TreeCollision_AddFace(self, *args)

    def EndBuild(self, *args):
        """
        EndBuild(self, int optimize)

        1
        """
        return _pynewton.TreeCollision_EndBuild(self, *args)

    def GetFaceAttribute(self, *args):
        """
        GetFaceAttribute(self, int faceIndexArray) -> int

        1
        """
        return _pynewton.TreeCollision_GetFaceAttribute(self, *args)

    def SetFaceAttribute(self, *args):
        """
        SetFaceAttribute(self, int faceIndexArray, int attribute)

        1
        """
        return _pynewton.TreeCollision_SetFaceAttribute(self, *args)

    def Serialize(self, *args):
        """
        Serialize(self, char filename) -> bool

        1
        """
        return _pynewton.TreeCollision_Serialize(self, *args)

    def Deserialize(self, *args):
        """
        Deserialize(self, char filename) -> bool

        1
        """
        return _pynewton.TreeCollision_Deserialize(self, *args)

    __swig_destroy__ = _pynewton.delete_TreeCollision
    __del__ = lambda self : None;
TreeCollision_swigregister = _pynewton.TreeCollision_swigregister
TreeCollision_swigregister(TreeCollision)

class Body(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Body, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Body, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_body"] = _pynewton.Body_m_body_set
    __swig_getmethods__["m_body"] = _pynewton.Body_m_body_get
    if _newclass:m_body = _swig_property(_pynewton.Body_m_body_get, _pynewton.Body_m_body_set)
    __swig_setmethods__["m_world"] = _pynewton.Body_m_world_set
    __swig_getmethods__["m_world"] = _pynewton.Body_m_world_get
    if _newclass:m_world = _swig_property(_pynewton.Body_m_world_get, _pynewton.Body_m_world_set)
    __swig_setmethods__["m_collision"] = _pynewton.Body_m_collision_set
    __swig_getmethods__["m_collision"] = _pynewton.Body_m_collision_get
    if _newclass:m_collision = _swig_property(_pynewton.Body_m_collision_get, _pynewton.Body_m_collision_set)
    __swig_setmethods__["userData"] = _pynewton.Body_userData_set
    __swig_getmethods__["userData"] = _pynewton.Body_userData_get
    if _newclass:userData = _swig_property(_pynewton.Body_userData_get, _pynewton.Body_userData_set)
    __swig_setmethods__["m_cleanupOnDestruct"] = _pynewton.Body_m_cleanupOnDestruct_set
    __swig_getmethods__["m_cleanupOnDestruct"] = _pynewton.Body_m_cleanupOnDestruct_get
    if _newclass:m_cleanupOnDestruct = _swig_property(_pynewton.Body_m_cleanupOnDestruct_get, _pynewton.Body_m_cleanupOnDestruct_set)
    __swig_setmethods__["m_zombie"] = _pynewton.Body_m_zombie_set
    __swig_getmethods__["m_zombie"] = _pynewton.Body_m_zombie_get
    if _newclass:m_zombie = _swig_property(_pynewton.Body_m_zombie_get, _pynewton.Body_m_zombie_set)
    def __init__(self, *args): 
        """
        __init__(self, NewtonBody body) -> Body
        __init__(self, World w, CollisionGeometry g) -> Body
        __init__(self, Body body) -> Body

        1
        """
        if self.__class__ == Body:
            _self = None
        else:
            _self = self
        this = _pynewton.new_Body(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Body
    __del__ = lambda self : None;
    def GetNewtonCollision(self):
        """
        GetNewtonCollision(self) -> NewtonCollision

        1
        """
        return _pynewton.Body_GetNewtonCollision(self)

    def GetNewtonWorld(self):
        """
        GetNewtonWorld(self) -> NewtonWorld

        1
        """
        return _pynewton.Body_GetNewtonWorld(self)

    def IDKey(self):
        """
        IDKey(self) -> int

        1
        """
        return _pynewton.Body_IDKey(self)

    def GetWorld(self):
        """
        GetWorld(self) -> World

        1
        """
        return _pynewton.Body_GetWorld(self)

    def SetMassMatrix(self, *args):
        """
        SetMassMatrix(self, dFloat mass, dFloat ix, dFloat iy, dFloat iz)

        1
        """
        return _pynewton.Body_SetMassMatrix(self, *args)

    def SetMatrix(self, *args):
        """
        SetMatrix(self, dFloat matrix)

        1
        """
        return _pynewton.Body_SetMatrix(self, *args)

    def SetMatrixRecursive(self, *args):
        """
        SetMatrixRecursive(self, dFloat matrix)

        1
        """
        return _pynewton.Body_SetMatrixRecursive(self, *args)

    def GetMatrix(self):
        """
        GetMatrix(self) -> PyObject

        1
        """
        return _pynewton.Body_GetMatrix(self)

    def GetMassMatrix(self):
        """
        GetMassMatrix(self) -> PyObject

        1
        """
        return _pynewton.Body_GetMassMatrix(self)

    def SetOmega(self, *args):
        """
        SetOmega(self, dFloat omega)

        1
        """
        return _pynewton.Body_SetOmega(self, *args)

    def SetForce(self, *args):
        """
        SetForce(self, dFloat force)

        1
        """
        return _pynewton.Body_SetForce(self, *args)

    def SetTorque(self, *args):
        """
        SetTorque(self, dFloat torque)

        1
        """
        return _pynewton.Body_SetTorque(self, *args)

    def AddForce(self, *args):
        """
        AddForce(self, dFloat force)

        1
        """
        return _pynewton.Body_AddForce(self, *args)

    def AddTorque(self, *args):
        """
        AddTorque(self, dFloat torque)

        1
        """
        return _pynewton.Body_AddTorque(self, *args)

    def GetForce(self):
        """
        GetForce(self) -> PyObject

        1
        """
        return _pynewton.Body_GetForce(self)

    def GetOmega(self):
        """
        GetOmega(self) -> PyObject

        1
        """
        return _pynewton.Body_GetOmega(self)

    def GetVelocity(self):
        """
        GetVelocity(self) -> PyObject

        1
        """
        return _pynewton.Body_GetVelocity(self)

    def GetTorque(self):
        """
        GetTorque(self) -> PyObject

        1
        """
        return _pynewton.Body_GetTorque(self)

    def GetCentreOfMass(self):
        """
        GetCentreOfMass(self) -> PyObject

        1
        """
        return _pynewton.Body_GetCentreOfMass(self)

    def SetVelocity(self, *args):
        """
        SetVelocity(self, dFloat velocity)

        1
        """
        return _pynewton.Body_SetVelocity(self, *args)

    def Freeze(self):
        """
        Freeze(self)

        1
        """
        return _pynewton.Body_Freeze(self)

    def Unfreeze(self):
        """
        Unfreeze(self)

        1
        """
        return _pynewton.Body_Unfreeze(self)

    def SetCentreOfMass(self, *args):
        """
        SetCentreOfMass(self, dFloat vector)

        1
        """
        return _pynewton.Body_SetCentreOfMass(self, *args)

    def SetLinearDamping(self, *args):
        """
        SetLinearDamping(self, dFloat linearDamp)

        1
        """
        return _pynewton.Body_SetLinearDamping(self, *args)

    def SetAngularDamping(self, *args):
        """
        SetAngularDamping(self, dFloat vector)

        1
        """
        return _pynewton.Body_SetAngularDamping(self, *args)

    def CoriolisForcesMode(self, *args):
        """
        CoriolisForcesMode(self, int mode)

        1
        """
        return _pynewton.Body_CoriolisForcesMode(self, *args)

    def SetCollision(self, *args):
        """
        SetCollision(self, CollisionGeometry collision)

        1
        """
        return _pynewton.Body_SetCollision(self, *args)

    def SetAutoFreeze(self, *args):
        """
        SetAutoFreeze(self, int state)

        1
        """
        return _pynewton.Body_SetAutoFreeze(self, *args)

    def SetFreezeTreshold(self, *args):
        """
        SetFreezeTreshold(self, dFloat freezeSpeed2, dFloat freezeOmega2, int framesCount)

        1
        """
        return _pynewton.Body_SetFreezeTreshold(self, *args)

    def GetSleepingState(self):
        """
        GetSleepingState(self) -> int

        1
        """
        return _pynewton.Body_GetSleepingState(self)

    def GetAutoFreeze(self):
        """
        GetAutoFreeze(self) -> int

        1
        """
        return _pynewton.Body_GetAutoFreeze(self)

    def GetLinearDamping(self):
        """
        GetLinearDamping(self) -> dFloat

        1
        """
        return _pynewton.Body_GetLinearDamping(self)

    def GetAngularDamping(self):
        """
        GetAngularDamping(self) -> PyObject

        1
        """
        return _pynewton.Body_GetAngularDamping(self)

    def GetAABB(self):
        """
        GetAABB(self) -> PyObject

        1
        """
        return _pynewton.Body_GetAABB(self)

    def GetFreezeTreshold(self):
        """
        GetFreezeTreshold(self) -> PyObject

        1
        """
        return _pynewton.Body_GetFreezeTreshold(self)

    def SetMaterialGroupID(self, *args):
        """
        SetMaterialGroupID(self, int id)

        1
        """
        return _pynewton.Body_SetMaterialGroupID(self, *args)

    def SetContinuousCollisionMode(self, *args):
        """
        SetContinuousCollisionMode(self, unsigned int state)

        1
        """
        return _pynewton.Body_SetContinuousCollisionMode(self, *args)

    def SetJointRecursiveCollision(self, *args):
        """
        SetJointRecursiveCollision(self, unsigned int state)

        1
        """
        return _pynewton.Body_SetJointRecursiveCollision(self, *args)

    def SetDestructorCallback(self, *args):
        """
        SetDestructorCallback(self, NewtonBodyDestructor callback)

        1
        """
        return _pynewton.Body_SetDestructorCallback(self, *args)

    def SetUserData(self, *args):
        """
        SetUserData(self, PyObject data)

        1
        """
        return _pynewton.Body_SetUserData(self, *args)

    def GetUserData(self):
        """
        GetUserData(self) -> PyObject

        1
        """
        return _pynewton.Body_GetUserData(self)

    def MaterialGroupID(self):
        """
        MaterialGroupID(self) -> int

        1
        """
        return _pynewton.Body_MaterialGroupID(self)

    def GetContinuousCollisionMode(self):
        """
        GetContinuousCollisionMode(self) -> int

        1
        """
        return _pynewton.Body_GetContinuousCollisionMode(self)

    def GetJointRecursiveCollision(self):
        """
        GetJointRecursiveCollision(self) -> int

        1
        """
        return _pynewton.Body_GetJointRecursiveCollision(self)

    def GetInvMass(self):
        """
        GetInvMass(self) -> PyObject

        1
        """
        return _pynewton.Body_GetInvMass(self)

    def AddBuoyancyForce(self, *args):
        """
        AddBuoyancyForce(self, dFloat fluidDensity, dFloat fluidLinearViscosity, dFloat fluidAngularViscosity, 
            dFloat gravityVector, 
            dFloat plane)

        1
        """
        return _pynewton.Body_AddBuoyancyForce(self, *args)

    def ForEachPolygonDo(self, *args):
        """
        ForEachPolygonDo(self, NewtonCollisionIterator callback)

        1
        """
        return _pynewton.Body_ForEachPolygonDo(self, *args)

    def AddBodyImpulse(self, *args):
        """
        AddBodyImpulse(self, dFloat velocity, dFloat point)

        1
        """
        return _pynewton.Body_AddBodyImpulse(self, *args)

    def OnTreeCollisionWith(self, *args):
        """
        OnTreeCollisionWith(self, Body body)

        1
        """
        return _pynewton.Body_OnTreeCollisionWith(self, *args)

    def OnApplyForceAndTorque(self):
        """
        OnApplyForceAndTorque(self)

        1
        """
        return _pynewton.Body_OnApplyForceAndTorque(self)

    def OnAutoactive(self, *args):
        """
        OnAutoactive(self, unsigned int state)

        1
        """
        return _pynewton.Body_OnAutoactive(self, *args)

    def OnTransform(self):
        """
        OnTransform(self)

        1
        """
        return _pynewton.Body_OnTransform(self)

    def OnDestruct(self):
        """
        OnDestruct(self)

        1
        """
        return _pynewton.Body_OnDestruct(self)

    def WrapperFor(*args):
        """
        WrapperFor(NewtonBody bodyptr) -> Body

        1
        """
        return _pynewton.Body_WrapperFor(*args)

    if _newclass:WrapperFor = staticmethod(WrapperFor)
    __swig_getmethods__["WrapperFor"] = lambda x: WrapperFor
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_Body(self)
        return weakref_proxy(self)
Body_swigregister = _pynewton.Body_swigregister
Body_swigregister(Body)

def Body_WrapperFor(*args):
  """
    Body_WrapperFor(NewtonBody bodyptr) -> Body

    1
    """
  return _pynewton.Body_WrapperFor(*args)

class Joint(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_world"] = _pynewton.Joint_m_world_set
    __swig_getmethods__["m_world"] = _pynewton.Joint_m_world_get
    if _newclass:m_world = _swig_property(_pynewton.Joint_m_world_get, _pynewton.Joint_m_world_set)
    __swig_setmethods__["m_joint"] = _pynewton.Joint_m_joint_set
    __swig_getmethods__["m_joint"] = _pynewton.Joint_m_joint_get
    if _newclass:m_joint = _swig_property(_pynewton.Joint_m_joint_get, _pynewton.Joint_m_joint_set)
    __swig_setmethods__["m_userData"] = _pynewton.Joint_m_userData_set
    __swig_getmethods__["m_userData"] = _pynewton.Joint_m_userData_get
    if _newclass:m_userData = _swig_property(_pynewton.Joint_m_userData_get, _pynewton.Joint_m_userData_set)
    def __init__(self): 
        """
        __init__(self) -> Joint

        1
        """
        this = _pynewton.new_Joint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Joint
    __del__ = lambda self : None;
    def ForceDestroy(self):
        """
        ForceDestroy(self)

        1
        """
        return _pynewton.Joint_ForceDestroy(self)

    def SetUserData(self, *args):
        """
        SetUserData(self, PyObject userData)

        1
        """
        return _pynewton.Joint_SetUserData(self, *args)

    def GetUserData(self):
        """
        GetUserData(self) -> PyObject

        1
        """
        return _pynewton.Joint_GetUserData(self)

    def SetCollisionState(self, *args):
        """
        SetCollisionState(self, int state)

        1
        """
        return _pynewton.Joint_SetCollisionState(self, *args)

    def GetCollisionState(self):
        """
        GetCollisionState(self) -> int

        1
        """
        return _pynewton.Joint_GetCollisionState(self)

    def SetStiffness(self, *args):
        """
        SetStiffness(self, dFloat stiffness)

        1
        """
        return _pynewton.Joint_SetStiffness(self, *args)

    def GetStiffness(self):
        """
        GetStiffness(self) -> dFloat

        1
        """
        return _pynewton.Joint_GetStiffness(self)

    def OnDestroyed(self):
        """
        OnDestroyed(self)

        1
        """
        return _pynewton.Joint_OnDestroyed(self)

Joint_swigregister = _pynewton.Joint_swigregister
Joint_swigregister(Joint)

class BallJoint(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BallJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BallJoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pivotPoint, Body childBody, Body parentBody) -> BallJoint

        1
        """
        if self.__class__ == BallJoint:
            _self = None
        else:
            _self = self
        this = _pynewton.new_BallJoint(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetJointAngle(self):
        """
        GetJointAngle(self) -> PyObject

        1
        """
        return _pynewton.BallJoint_GetJointAngle(self)

    def GetJointOmega(self):
        """
        GetJointOmega(self) -> PyObject

        1
        """
        return _pynewton.BallJoint_GetJointOmega(self)

    def GetJointForce(self):
        """
        GetJointForce(self) -> PyObject

        1
        """
        return _pynewton.BallJoint_GetJointForce(self)

    def OnCallback(self):
        """
        OnCallback(self)

        1
        """
        return _pynewton.BallJoint_OnCallback(self)

    def SetConeLimits(self, *args):
        """
        SetConeLimits(self, dFloat pin, dFloat maxConeAngle, dFloat maxTwistAngle)

        1
        """
        return _pynewton.BallJoint_SetConeLimits(self, *args)

    __swig_destroy__ = _pynewton.delete_BallJoint
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_BallJoint(self)
        return weakref_proxy(self)
BallJoint_swigregister = _pynewton.BallJoint_swigregister
BallJoint_swigregister(BallJoint)

class Hinge(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hinge, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hinge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pivotPoint, dFloat pinDir, Body childBody, 
            Body parentBody) -> Hinge

        1
        """
        if self.__class__ == Hinge:
            _self = None
        else:
            _self = self
        this = _pynewton.new_Hinge(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetJointAngle(self):
        """
        GetJointAngle(self) -> dFloat

        1
        """
        return _pynewton.Hinge_GetJointAngle(self)

    def GetJointOmega(self):
        """
        GetJointOmega(self) -> dFloat

        1
        """
        return _pynewton.Hinge_GetJointOmega(self)

    def GetJointForce(self):
        """
        GetJointForce(self) -> PyObject

        1
        """
        return _pynewton.Hinge_GetJointForce(self)

    def CalculateStopAlpha(self, *args):
        """
        CalculateStopAlpha(self, NewtonHingeSliderUpdateDesc desc, dFloat angle) -> dFloat

        1
        """
        return _pynewton.Hinge_CalculateStopAlpha(self, *args)

    def OnCallback(self, *args):
        """
        OnCallback(self, NewtonHingeSliderUpdateDesc desc) -> unsigned int

        1
        """
        return _pynewton.Hinge_OnCallback(self, *args)

    __swig_destroy__ = _pynewton.delete_Hinge
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_Hinge(self)
        return weakref_proxy(self)
Hinge_swigregister = _pynewton.Hinge_swigregister
Hinge_swigregister(Hinge)

class Slider(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slider, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Slider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pivotPoint, dFloat pinDir, Body childBody, 
            Body parentBody) -> Slider

        1
        """
        if self.__class__ == Slider:
            _self = None
        else:
            _self = self
        this = _pynewton.new_Slider(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetPosition(self):
        """
        GetPosition(self) -> dFloat

        1
        """
        return _pynewton.Slider_GetPosition(self)

    def GetVelocity(self):
        """
        GetVelocity(self) -> dFloat

        1
        """
        return _pynewton.Slider_GetVelocity(self)

    def GetForce(self):
        """
        GetForce(self) -> PyObject

        1
        """
        return _pynewton.Slider_GetForce(self)

    def SetMinLimit(self, *args):
        """
        SetMinLimit(self, dFloat f)

        1
        """
        return _pynewton.Slider_SetMinLimit(self, *args)

    def SetMaxLimit(self, *args):
        """
        SetMaxLimit(self, dFloat f)

        1
        """
        return _pynewton.Slider_SetMaxLimit(self, *args)

    def GetMinLimit(self):
        """
        GetMinLimit(self) -> dFloat

        1
        """
        return _pynewton.Slider_GetMinLimit(self)

    def GetMaxLimit(self):
        """
        GetMaxLimit(self) -> dFloat

        1
        """
        return _pynewton.Slider_GetMaxLimit(self)

    def CalculateStopAccel(self, *args):
        """
        CalculateStopAccel(self, NewtonHingeSliderUpdateDesc desc, dFloat position) -> dFloat

        1
        """
        return _pynewton.Slider_CalculateStopAccel(self, *args)

    def OnCallback(self, *args):
        """
        OnCallback(self, NewtonHingeSliderUpdateDesc desc) -> unsigned int

        1
        """
        return _pynewton.Slider_OnCallback(self, *args)

    __swig_destroy__ = _pynewton.delete_Slider
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_Slider(self)
        return weakref_proxy(self)
Slider_swigregister = _pynewton.Slider_swigregister
Slider_swigregister(Slider)

class Corkscrew(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Corkscrew, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Corkscrew, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pivotPoint, dFloat pinDir, Body childBody, 
            Body parentBody) -> Corkscrew

        1
        """
        if self.__class__ == Corkscrew:
            _self = None
        else:
            _self = self
        this = _pynewton.new_Corkscrew(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetPosition(self):
        """
        GetPosition(self) -> dFloat

        1
        """
        return _pynewton.Corkscrew_GetPosition(self)

    def GetAngle(self):
        """
        GetAngle(self) -> dFloat

        1
        """
        return _pynewton.Corkscrew_GetAngle(self)

    def GetVelocity(self):
        """
        GetVelocity(self) -> dFloat

        1
        """
        return _pynewton.Corkscrew_GetVelocity(self)

    def GetOmega(self):
        """
        GetOmega(self) -> dFloat

        1
        """
        return _pynewton.Corkscrew_GetOmega(self)

    def GetForce(self):
        """
        GetForce(self) -> PyObject

        1
        """
        return _pynewton.Corkscrew_GetForce(self)

    def OnCallback(self, *args):
        """
        OnCallback(self, NewtonHingeSliderUpdateDesc desc) -> unsigned int

        1
        """
        return _pynewton.Corkscrew_OnCallback(self, *args)

    def CalculateStopAlpha(self, *args):
        """
        CalculateStopAlpha(self, NewtonHingeSliderUpdateDesc desc, dFloat angle) -> dFloat

        1
        """
        return _pynewton.Corkscrew_CalculateStopAlpha(self, *args)

    def CalculateStopAccel(self, *args):
        """
        CalculateStopAccel(self, NewtonJoint corkscrew, NewtonHingeSliderUpdateDesc desc, 
            dFloat position) -> dFloat

        1
        """
        return _pynewton.Corkscrew_CalculateStopAccel(self, *args)

    __swig_destroy__ = _pynewton.delete_Corkscrew
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_Corkscrew(self)
        return weakref_proxy(self)
Corkscrew_swigregister = _pynewton.Corkscrew_swigregister
Corkscrew_swigregister(Corkscrew)

class UniversalJoint(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniversalJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniversalJoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pivotPoint, dFloat pinDir0, dFloat pinDir1, 
            Body childBody, Body parentBody) -> UniversalJoint

        1
        """
        if self.__class__ == UniversalJoint:
            _self = None
        else:
            _self = self
        this = _pynewton.new_UniversalJoint(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetAngle0(self):
        """
        GetAngle0(self) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_GetAngle0(self)

    def GetAngle1(self):
        """
        GetAngle1(self) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_GetAngle1(self)

    def GetOmega0(self):
        """
        GetOmega0(self) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_GetOmega0(self)

    def GetOmega1(self):
        """
        GetOmega1(self) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_GetOmega1(self)

    def GetForce(self):
        """
        GetForce(self) -> PyObject

        1
        """
        return _pynewton.UniversalJoint_GetForce(self)

    def OnCallback(self, *args):
        """
        OnCallback(self, NewtonHingeSliderUpdateDesc desc) -> unsigned int

        1
        """
        return _pynewton.UniversalJoint_OnCallback(self, *args)

    def CalculateStopAlpha0(self, *args):
        """
        CalculateStopAlpha0(self, NewtonHingeSliderUpdateDesc desc, dFloat angle) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_CalculateStopAlpha0(self, *args)

    def CalculateStopAlpha1(self, *args):
        """
        CalculateStopAlpha1(self, NewtonHingeSliderUpdateDesc desc, dFloat angle) -> dFloat

        1
        """
        return _pynewton.UniversalJoint_CalculateStopAlpha1(self, *args)

    __swig_destroy__ = _pynewton.delete_UniversalJoint
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_UniversalJoint(self)
        return weakref_proxy(self)
UniversalJoint_swigregister = _pynewton.UniversalJoint_swigregister
UniversalJoint_swigregister(UniversalJoint)

class UpVector(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpVector, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat pinDir, Body body) -> UpVector

        1
        """
        if self.__class__ == UpVector:
            _self = None
        else:
            _self = self
        this = _pynewton.new_UpVector(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def GetPin(self):
        """
        GetPin(self) -> PyObject

        1
        """
        return _pynewton.UpVector_GetPin(self)

    def SetPin(self, *args):
        """
        SetPin(self, dFloat pin)

        1
        """
        return _pynewton.UpVector_SetPin(self, *args)

    __swig_destroy__ = _pynewton.delete_UpVector
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _pynewton.disown_UpVector(self)
        return weakref_proxy(self)
UpVector_swigregister = _pynewton.UpVector_swigregister
UpVector_swigregister(UpVector)

class UserJoint(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserJoint, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> UserJoint

        1
        """
        this = _pynewton.new_UserJoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_UserJoint
    __del__ = lambda self : None;
UserJoint_swigregister = _pynewton.UserJoint_swigregister
UserJoint_swigregister(UserJoint)

class Tire(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tire, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tire, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vehicle"] = _pynewton.Tire_m_vehicle_set
    __swig_getmethods__["m_vehicle"] = _pynewton.Tire_m_vehicle_get
    if _newclass:m_vehicle = _swig_property(_pynewton.Tire_m_vehicle_get, _pynewton.Tire_m_vehicle_set)
    __swig_setmethods__["m_tireID"] = _pynewton.Tire_m_tireID_set
    __swig_getmethods__["m_tireID"] = _pynewton.Tire_m_tireID_get
    if _newclass:m_tireID = _swig_property(_pynewton.Tire_m_tireID_get, _pynewton.Tire_m_tireID_set)
    __swig_setmethods__["m_userData"] = _pynewton.Tire_m_userData_set
    __swig_getmethods__["m_userData"] = _pynewton.Tire_m_userData_get
    if _newclass:m_userData = _swig_property(_pynewton.Tire_m_userData_get, _pynewton.Tire_m_userData_set)
    def __init__(self, *args): 
        """
        __init__(self, Vehicle v, void tireid) -> Tire
        __init__(self, Tire t) -> Tire

        1
        """
        this = _pynewton.new_Tire(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Tire
    __del__ = lambda self : None;
    def SetUserData(self, *args):
        """
        SetUserData(self, PyObject userData)

        1
        """
        return _pynewton.Tire_SetUserData(self, *args)

    def GetUserData(self):
        """
        GetUserData(self) -> PyObject

        1
        """
        return _pynewton.Tire_GetUserData(self)

    def IsAirBorne(self):
        """
        IsAirBorne(self) -> bool

        1
        """
        return _pynewton.Tire_IsAirBorne(self)

    def LostSideGrip(self):
        """
        LostSideGrip(self) -> bool

        1
        """
        return _pynewton.Tire_LostSideGrip(self)

    def LostTraction(self):
        """
        LostTraction(self) -> bool

        1
        """
        return _pynewton.Tire_LostTraction(self)

    def GetOmega(self):
        """
        GetOmega(self) -> dFloat

        1
        """
        return _pynewton.Tire_GetOmega(self)

    def GetNormalLoad(self):
        """
        GetNormalLoad(self) -> dFloat

        1
        """
        return _pynewton.Tire_GetNormalLoad(self)

    def GetSteerAngle(self):
        """
        GetSteerAngle(self) -> dFloat

        1
        """
        return _pynewton.Tire_GetSteerAngle(self)

    def GetLateralSpeed(self):
        """
        GetLateralSpeed(self) -> dFloat

        1
        """
        return _pynewton.Tire_GetLateralSpeed(self)

    def GetLongitudinalSpeed(self):
        """
        GetLongitudinalSpeed(self) -> dFloat

        1
        """
        return _pynewton.Tire_GetLongitudinalSpeed(self)

    def GetMatrix(self):
        """
        GetMatrix(self) -> PyObject

        1
        """
        return _pynewton.Tire_GetMatrix(self)

    def SetTorque(self, *args):
        """
        SetTorque(self, dFloat torque)

        1
        """
        return _pynewton.Tire_SetTorque(self, *args)

    def SetSteerAngle(self, *args):
        """
        SetSteerAngle(self, dFloat angle)

        1
        """
        return _pynewton.Tire_SetSteerAngle(self, *args)

    def SetMaxSideSleepSpeed(self, *args):
        """
        SetMaxSideSleepSpeed(self, dFloat speed)

        1
        """
        return _pynewton.Tire_SetMaxSideSleepSpeed(self, *args)

    def SetSideSleepCoeficient(self, *args):
        """
        SetSideSleepCoeficient(self, dFloat coeficient)

        1
        """
        return _pynewton.Tire_SetSideSleepCoeficient(self, *args)

    def SetMaxLongitudinalSlideSpeed(self, *args):
        """
        SetMaxLongitudinalSlideSpeed(self, dFloat speed)

        1
        """
        return _pynewton.Tire_SetMaxLongitudinalSlideSpeed(self, *args)

    def SetLongitudinalSlideCoeficient(self, *args):
        """
        SetLongitudinalSlideCoeficient(self, dFloat coeficient)

        1
        """
        return _pynewton.Tire_SetLongitudinalSlideCoeficient(self, *args)

    def CalculateMaxBrakeAcceleration(self):
        """
        CalculateMaxBrakeAcceleration(self) -> dFloat

        1
        """
        return _pynewton.Tire_CalculateMaxBrakeAcceleration(self)

    def SetBrakeAcceleration(self, *args):
        """
        SetBrakeAcceleration(self, dFloat accel, dFloat torqueLimit)

        1
        """
        return _pynewton.Tire_SetBrakeAcceleration(self, *args)

Tire_swigregister = _pynewton.Tire_swigregister
Tire_swigregister(Tire)

class Vehicle(Joint):
    """1"""
    __swig_setmethods__ = {}
    for _s in [Joint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vehicle, name, value)
    __swig_getmethods__ = {}
    for _s in [Joint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vehicle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, dFloat upDir, Body body) -> Vehicle

        1
        """
        if self.__class__ == Vehicle:
            _self = None
        else:
            _self = self
        this = _pynewton.new_Vehicle(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_Vehicle
    __del__ = lambda self : None;
    def Reset(self):
        """
        Reset(self)

        1
        """
        return _pynewton.Vehicle_Reset(self)

    def AddTire(self, *args):
        """
        AddTire(self, dFloat matrix, dFloat pin, dFloat mass, dFloat width, 
            dFloat radius, dFloat suspensionShock, dFloat suspensionSpring, 
            dFloat suspensionLength, 
            PyObject userData, int collisionID) -> Tire

        1
        """
        return _pynewton.Vehicle_AddTire(self, *args)

    def RemoveTire(self, *args):
        """
        RemoveTire(self, Tire tire)

        1
        """
        return _pynewton.Vehicle_RemoveTire(self, *args)

    def OnCallback(self):
        """
        OnCallback(self)

        1
        """
        return _pynewton.Vehicle_OnCallback(self)

    def GetFirstTire(self):
        """
        GetFirstTire(self) -> Tire

        1
        """
        return _pynewton.Vehicle_GetFirstTire(self)

    def GetNextTireID(self, *args):
        """
        GetNextTireID(self, Tire tireID) -> Tire

        1
        """
        return _pynewton.Vehicle_GetNextTireID(self, *args)

    def __disown__(self):
        self.this.disown()
        _pynewton.disown_Vehicle(self)
        return weakref_proxy(self)
Vehicle_swigregister = _pynewton.Vehicle_swigregister
Vehicle_swigregister(Vehicle)


def GetEulerAngle(*args):
  """
    GetEulerAngle(dFloat matrix) -> PyObject

    1
    """
  return _pynewton.GetEulerAngle(*args)

def SetEulerAngle(*args):
  """
    SetEulerAngle(dFloat angle) -> PyObject

    1
    """
  return _pynewton.SetEulerAngle(*args)
class HeightField(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeightField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeightField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, World world, int size, dFloat cellSize, PyObject height_values) -> HeightField

        1
        """
        this = _pynewton.new_HeightField(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynewton.delete_HeightField
    __del__ = lambda self : None;
    def SetMatrix(self, *args):
        """
        SetMatrix(self, dFloat matrix)

        1
        """
        return _pynewton.HeightField_SetMatrix(self, *args)

    def GetMatrix(self):
        """
        GetMatrix(self) -> PyObject

        1
        """
        return _pynewton.HeightField_GetMatrix(self)

    def CellSize(self):
        """
        CellSize(self) -> dFloat

        1
        """
        return _pynewton.HeightField_CellSize(self)

    def Size(self):
        """
        Size(self) -> int

        1
        """
        return _pynewton.HeightField_Size(self)

HeightField_swigregister = _pynewton.HeightField_swigregister
HeightField_swigregister(HeightField)



